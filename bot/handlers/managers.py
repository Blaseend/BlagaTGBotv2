from aiogram import types
from aiogram.dispatcher import FSMContext
from bot.states.form_states import Form
from bot.utils.logging import debug_log
from aiogram.dispatcher import FSMContext
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.services.database import load_data, save_data, load_sent_links, save_sent_links, add_sent_link


PRIVILEGED_USERS = ["@team_lead_ivanov", "@hr_manager"]
PAGE_LIMIT = 5 

async def cmd_start(message: types.Message, state: FSMContext):
    debug_log("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", {"user": message.from_user.username})
    data = await load_data()
    
    user_name = message.from_user.full_name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
    manager_login = f"@{message.from_user.username}" if message.from_user.username else None
    is_privileged = message.from_user.username in PRIVILEGED_USERS
    
    # –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–∞–∂–µ –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    manager = next((m for m in data['managers'] if m['telegram_login'].lower() == manager_login.lower()), None) if manager_login else None
    
    if manager or is_privileged:
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await state.update_data(selected_manager=manager['telegram_login'] if manager else None)
        
        markup = types.InlineKeyboardMarkup()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if manager and manager['employees']:
            for employee in manager['employees']:
                safe_name = employee['name'].replace('_', '%%UNDERSCORE%%')
                markup.add(types.InlineKeyboardButton(
                    text=employee['name'],
                    callback_data=f"employee_{safe_name}"
                ))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        buttons = [
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚ûï", callback_data="add_employee"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics")
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_privileged:
            buttons.append(types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers"))
        
        markup.row(*buttons)
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        await Form.select_employee.set()
        message_text = greeting + ("–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:" if manager else "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        await message.answer(message_text, reply_markup=markup)
    else:
        await message.answer(greeting + "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def manage_managers(callback_query: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    data = await load_data()
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚ûï", callback_data="add_manager"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚ùå", callback_data="delete_manager")
    )
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    
    await callback_query.message.edit_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:",
        reply_markup=markup
    )
    await callback_query.answer()

async def process_manager(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        safe_login = callback_query.data.split('manager_')[1]
        manager_login = safe_login.replace('%%UNDERSCORE%%', '_')
        debug_log("–í—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞", {"manager": manager_login})
        
        await state.update_data(selected_manager=manager_login)
        data = await load_data()
        manager = next((m for m in data['managers'] if m['telegram_login'] == manager_login), None)
        
        if not manager:
            await callback_query.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        markup = types.InlineKeyboardMarkup()
        for employee in manager['employees']:
            safe_name = employee['name'].replace('_', '%%UNDERSCORE%%')
            markup.add(types.InlineKeyboardButton(
                text=employee['name'],
                callback_data=f"employee_{safe_name}"
            ))
        markup.row(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚ûï", callback_data="add_employee"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
        )
        
        await Form.select_employee.set()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–≥–æ:",
            reply_markup=markup
        )
    except Exception as e:
        debug_log("–û—à–∏–±–∫–∞ –≤ process_manager", {"error": str(e)})
    await callback_query.answer()

async def back_to_start(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cmd_start(await callback_query.message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:"))
    await callback_query.answer()

async def add_manager(callback_query: types.CallbackQuery):
    await Form.new_manager_login.set()
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ telegram_login –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await callback_query.answer()

async def process_new_manager_login(message: types.Message, state: FSMContext):
    try:
        new_login = message.text.strip()
        if not new_login:
            await message.answer("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
            
        data = await load_data()
        
        if any(m['telegram_login'].lower() == new_login.lower() for m in data['managers']):
            await message.answer("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await state.finish()
            return
        
        data['managers'].append({
            "telegram_login": new_login,
            "employees": []
        })
        
        if await save_data(data):
            await message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {new_login} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.finish()
        
        await cmd_start(message)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        debug_log("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", {"error": str(e)})
        await state.finish()

async def delete_manager(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await load_data()
        if not data['managers']:
            await callback_query.message.edit_text("–ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await callback_query.answer()
            return

        markup = types.InlineKeyboardMarkup()
        for manager in data['managers']:
            safe_login = manager['telegram_login'].replace('_', '%%UNDERSCORE%%')
            markup.add(types.InlineKeyboardButton(
                text=manager['telegram_login'],
                callback_data=f"delete_manager_{safe_login}"
            ))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
        
        await Form.select_manager_to_delete.set()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    except Exception as e:
        debug_log("–û—à–∏–±–∫–∞ –≤ delete_manager", {"error": str(e)})
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    await callback_query.answer()

async def confirm_delete_manager(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_data
        safe_login = callback_query.data.split('delete_manager_')[1]
        manager_login = safe_login.replace('%%UNDERSCORE%%', '_')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ state
        await state.update_data(manager_to_delete=manager_login)
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_yes"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_start")
        )
        
        await Form.confirm_delete_manager.set()
        await callback_query.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_login} –∏ –≤—Å–µ—Ö –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?",
            reply_markup=markup
        )
    except Exception as e:
        debug_log("–û—à–∏–±–∫–∞ –≤ confirm_delete_manager", {"error": str(e)})
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    await callback_query.answer()

async def execute_delete_manager(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_data = await state.get_data()
        manager_login = user_data.get('manager_to_delete')
        
        if not manager_login:
            await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await state.finish()
            return
        
        data = await load_data()
        initial_count = len(data['managers'])
        data['managers'] = [m for m in data['managers'] if m['telegram_login'] != manager_login]
        
        if len(data['managers']) < initial_count:
            if await save_data(data):
                await callback_query.message.edit_text(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_login} –∏ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            else:
                await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        else:
            await callback_query.message.edit_text(f"‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await state.finish()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cmd_start(await callback_query.message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:"))
    except Exception as e:
        debug_log("–û—à–∏–±–∫–∞ –≤ execute_delete_manager", {"error": str(e)})
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    await callback_query.answer()

async def show_statistics(callback_query: types.CallbackQuery, state: FSMContext, page=0):
    try:
        user_data = await state.get_data()
        manager_login = user_data.get('selected_manager')
        sent_links = load_sent_links()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        manager_links = [
            link for link in sent_links['sent_links']
            if link['manager_login'].lower() == manager_login.lower()
        ]

        if not manager_links:
            await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ master_id
        grouped = {}
        for link in manager_links:
            try:
                date = datetime.fromisoformat(link['date']).strftime('%d.%m.%y')
            except Exception:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É
            master_id = link['master_id']
            if date not in grouped:
                grouped[date] = {}
            if master_id not in grouped[date]:
                grouped[date][master_id] = []
            grouped[date][master_id].append(link)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        all_dates = sorted(grouped.keys(), reverse=True)
        total_pages = (len(all_dates) + PAGE_LIMIT - 1) // PAGE_LIMIT
        current_dates = all_dates[page*PAGE_LIMIT:(page+1)*PAGE_LIMIT]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å—Ç—Ä. {page+1}/{total_pages}):\n\n"
        for date in current_dates:
            message += f"<b>{date}</b>\n"
            for master_id, links in grouped[date].items():
                employee_name = links[0]['employee_name']
                message += f"\nMaster ID: {master_id} ({employee_name})\n"
                for link in links:
                    message += f"- {link['url']}\n"
            message += "\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        markup = InlineKeyboardMarkup()
        if len(all_dates) > PAGE_LIMIT:
            row = []
            if page > 0:
                row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"stats_page_{page-1}"))
            if page < total_pages - 1:
                row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"stats_page_{page+1}"))
            markup.row(*row)

        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_employees"))

        await callback_query.message.edit_text(message, reply_markup=markup)
        await callback_query.answer()

    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        debug_log("–û—à–∏–±–∫–∞ –≤ show_statistics", {"error": str(e)})
       
# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è back_to_employees
async def back_to_employees_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_data = await state.get_data()
        manager_login = user_data.get('selected_manager')
        data = await load_data()
        manager = next((m for m in data['managers'] if m['telegram_login'] == manager_login), None)

        markup = types.InlineKeyboardMarkup()
        for employee in manager['employees']:
            safe_name = employee['name'].replace('_', '%%UNDERSCORE%%')
            markup.add(types.InlineKeyboardButton(
                text=employee['name'],
                callback_data=f"employee_{safe_name}"
            ))
        markup.row(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚ûï", callback_data="add_employee"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics")
        )
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        await Form.select_employee.set()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–≥–æ:",
            reply_markup=markup
        )
        await callback_query.answer()
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        debug_log("–û—à–∏–±–∫–∞ –≤ back_to_employees_handler", {"error": str(e)})

async def handle_stats_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[-1])
    await show_statistics(callback_query, state, page)



def register_managers_handlers(dp):
    dp.register_message_handler(cmd_start, commands=['start'], state='*')
    dp.register_callback_query_handler(process_manager, lambda c: c.data.startswith('manager_'), state=Form.select_manager)
    dp.register_callback_query_handler(back_to_start, lambda c: c.data == 'back_to_start', state='*')
    
    dp.register_callback_query_handler(add_manager, lambda c: c.data == 'add_manager', state='*')  # –ë—ã–ª–æ Form.select_manager
    dp.register_message_handler(process_new_manager_login, state=Form.new_manager_login)
    dp.register_callback_query_handler(delete_manager, lambda c: c.data == 'delete_manager', state='*')  # –ë—ã–ª–æ Form.select_manager
    dp.register_callback_query_handler(confirm_delete_manager, lambda c: c.data.startswith('delete_manager_'), state='*')  # –ë—ã–ª–æ Form.select_manager_to_delete
    dp.register_callback_query_handler(execute_delete_manager, lambda c: c.data == 'confirm_delete_yes', state='*')  # –ë—ã–ª–æ Form.confirm_delete_manager
    
    dp.register_callback_query_handler(show_statistics, lambda c: c.data == 'show_statistics', state=Form.select_employee)
    dp.register_callback_query_handler(handle_stats_pagination, lambda c: c.data.startswith('stats_page_'), state=Form.select_employee)
    dp.register_callback_query_handler(back_to_employees_handler, lambda c: c.data == 'back_to_employees', state='*')
    dp.register_callback_query_handler(manage_managers, lambda c: c.data == 'manage_managers', state='*')